# Instructions
# Нельзя пользоваться дополнительными библиотеками.
# Написать программу. На вход подается дата в числовом виде, на выходе дата, прописанная словами. Год вводится в 4х значном формате. Программа должна содержать функции:
# year_to_word(n)      переводит год
# month_to_word(n)   переводит месяц
# date_to_word(n)      переводит число месяца в слова
# Например:
# 1.In: 21.03.2025 out: двадцать первое марта две тысячи двадцать пятого года
# 2.In: 2.08.1901 out: второе августа одна тысяча девятьсот первого года

print("\033c", end="")
dicDate = {
    1: "первое",
    2: "второе",
    3: "третье",
    4: "четвертое",
    5: "пятое",
    6: "шестое",
    7: "седьмое",
    8: "восьмое",
    9: "девятое",
    10: "десятое",
    11: "одиннадцатое",
    12: "двенадцатое",
    13: "тринадцатое",
    14: "четырнадцатое",
    15: "пятнадцатое",
    16: "шестнадцатое",
    17: "семнадцатое",
    18: "восемнадцатое",
    19: "девятнадцатое",
    20: "двадцатое",
    21: "двадцать",
    30: "тридцатое",
    31: "тридцать первое",
}


# переводит число месяца в слова
# Число не может быть больше двух знаков и не может быть больше 31 в общем случае
# Предполагаем что нам не отправять значение с неверным типом
def day_to_word(day):
    if 0 <= day <= 31:
        if 20 < day < 30:
            return f"{dicDate[21]} {dicDate[day%20]}"
        if day in dicDate:
            return f"{dicDate[day]}"
    return "Ошибка даты: день"


dicMonth = {
    1: "января",
    2: "февраля",
    3: "марта",
    4: "апреля",
    5: "мая",
    6: "июня",
    7: "июля",
    8: "августа",
    9: "сентября",
    10: "октября",
    11: "ноября",
    12: "декабря",
}


# переводит месяц
def month_to_word(month):
    if month in dicMonth:
        return f"{dicMonth[month]}"
    return "Ошибка даты: месяц"


dicYear = {
    1: "первого",
    2: "второго",
    3: "третьего",
    4: "четвертого",
    5: "пятого",
    6: "шестого",
    7: "седьмого",
    8: "восьмого",
    9: "девятого",
    10: "десятого",
    11: "одиннадцатого",
    12: "двенадцатого",
    13: "тринадцатого",
    14: "четырнадцатого",
    15: "пятнадцатого",
    16: "шестнадцатого",
    17: "семнадцатого",
    18: "восемнадцатого",
    19: "девятнадцатого",
    20: "двадцатого",
}

dicYearT = {
    1: "тысяча",
    2: "две",
    3: "три",
    4: "четыре",
    5: "пять ",
    6: "шесть",
    7: "семь",
    8: "восемь",
    9: "девять",
}

dicYearS = {
    1: "сто",
    2: "двести",
    3: "триста",
    4: "четыреста",
    5: "пятьсот ",
    6: "шестьсот",
    7: "семьсот",
    8: "восемьсот",
    9: "девятьсот",
}

dicYearD = {
    1: "десятого",
    2: "двадцить",
    3: "тридцать",
    4: "сорок",
    5: "пятьдесят ",
    6: "шестьдесят",
    7: "семьдесят",
    8: "восемьдесят",
    9: "девяносто",
}

dicYearE = {
    1: "первого",
    2: "второго",
    3: "третьего",
    4: "четвертого",
    5: "пятого ",
    6: "шестого",
    7: "седьмого",
    8: "восьмого",
    9: "девятого",
}


# переводит год
def year_to_word(year):

    result = ""
    if year > 0:
        # print(f"Тысячилетие {year // 1000}")
        if (year // 1000) == 1:
            result += f"{dicYearT[year // 1000]}"
        elif 1 < (year // 1000) < 5:
            result += f"{dicYearT[year // 1000]} тысячи"
        else:
            result += f"{dicYearT[year // 1000]} тысяч"

        # print(f"Столетие {(year % 1000)//100}")
        if ((year % 1000) // 100) > 0:
            result += f" {dicYearS[(year % 1000)//100]}"

        # print(f"Десятилетие {(year % 100)//10}")
        if ((year % 100) // 10) > 0:
            result += f" {dicYearD[(year % 100)//10]}"
        # print(f"единицы года {(year % 10)//1}")
        if ((year % 10)) > 0:
            result += f" {dicYearE[(year % 10)]}"
    else:
        return "Ошибка даты: год"

    return result


def date_to_word(date):
    day, month, year = date.split(".")
    day = int(day)
    month = int(month)
    year = int(year)
    return f"{day_to_word(day)} {month_to_word(month)} {year_to_word(year)} года"


def test():
    date_tuple = tuple(zip(range(20, 32), range(1, 13), range(1900, 2025)))
    for day, month, year in date_tuple:
        print(f"{day_to_word(day)} {month_to_word(month)} {year_to_word(year)} года")


print("21.03.2025")
print(date_to_word("21.03.2025"))
print("2.08.1901")
print(date_to_word("2.08.1901"))

# num = int(input("Введите дату: "))
# print(date_to_word(num))